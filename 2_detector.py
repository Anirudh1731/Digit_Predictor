# -*- coding: utf-8 -*-
"""Copy of handwritten recogniziton system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SYEEEdA234cZa2Hwg9SL-xMS5UNuELNj
"""

#Fetching data
from sklearn.datasets import fetch_openml # for gaining the data set from internet we must use fetch_openml
mnist=fetch_openml('mnist_784') # each and evey dataset has a special code
x=mnist['data'] #the above statement will return a dictionary containg data , target , features.......
y=mnist['target'] #accessing the target from the dictionary
............................... #accessing a perticular image from the dataset
wanted_image=default_image.reshape(28,28) #reshaping into 28*28 as it will then be easy to plot
import matplotlib  # used as it contains pyplot which is very much needed to create an image or creat graph....
from matplotlib import pyplot as plt 
plt.imshow(wanted_image,cmap=matplotlib.cm.binary,interpolation="nearest")
#plt.imshow() is used for displaying the values in 2d
#cmap represents colour wanted
#interpolation represent upto what exten t the image should be accurate
y[36000] # x contains the data while y contains what exacytly that x represents
#now we need to train the ml model as well as test it
#now mnist itself provides the data set divided into testing and training hence we no more need to split the data up
x_train=x[:60000]  # {                               }
x_test=x[60000:]   # {    TRAINING BOTH DATAS        } 
y_train=y[:60000]  # {                               }
y_test=y[60000:]   # {                               }
import numpy as np
z=np.random.permutation(60000)  #will return a shuffled index range
#DOUBT
x_train=x_train[z]
y_train=y_train[z]
#NOW WE WILL MAKE A 2 DETECTOR
from sklearn.linear_model import LogisticRegression
clf=LogisticRegression()
y_train=y_train.astype(np.int8)# {  for changing the data type     }
y_test=y_test.astype(np.int8)#   {                                 }
y_train2=(y_train==2)
y_test2=(y_test==2)
clf.fit(x_train,y_train2)
clf.predict([default_image])
